import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties

from telethon import TelegramClient
from telethon.errors import UserNotParticipantError
from telethon.tl.functions.channels import GetParticipantRequest

from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
channel_username = os.getenv(
    "CHANNEL_USERNAME"
)  # –í–∞–∂–Ω–æ, —Å @ –∏–ª–∏ –±–µ–∑ ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –≤ Telephon

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
telethon_client = TelegramClient("checker_session", API_ID, API_HASH)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
main_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–ö–Ω–∏–≥–∏ üìñ", callback_data="books"),
            InlineKeyboardButton(text="–°–æ–Ω üí§", callback_data="sleep"),
        ],
        [
            InlineKeyboardButton(
                text="–ü–æ–ª–µ–∑–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª üìù", callback_data="materials"
            ),
            InlineKeyboardButton(text="–û–±–æ –º–Ω–µ", callback_data="about"),
        ],
    ]
)

books_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ó–∞—á–µ–º –º—ã —Å–ø–∏–º –ú–µ—Ç—Ç—å—é –£–æ–ª–∫–µ—Ä üí§", callback_data="book_sleep"
            )
        ],
        [
            InlineKeyboardButton(
                text="–ú–∞–≥–∏—è —É—Ç—Ä–∞ –•—ç–ª –≠–ª—Ä–æ–¥ üåÖ", callback_data="book_morning"
            )
        ],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data="back_main")],
    ]
)

subscribe_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="Colibry", url="https://t.me/zcolibry")],
        [
            InlineKeyboardButton(
                text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscribe"
            )
        ],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data="back_books")],
    ]
)

back_to_main_menu = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data="back_main")]]
)

back_to_books_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data="back_books")]
    ]
)

# === –ü–∞–º—è—Ç—å –æ –≤—ã–±–æ—Ä–µ –∫–Ω–∏–≥–∏ ===
user_book_request = {}


# === –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def delete_message(message: types.Message | types.CallbackQuery):
    try:
        if isinstance(message, types.CallbackQuery):
            await message.message.delete()
        else:
            await message.delete()
    except:
        pass


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ===
async def check_subscription(user_id: int) -> bool:
    await telethon_client.start()
    try:
        await telethon_client(
            GetParticipantRequest(channel=channel_username, participant=user_id)
        )
        return True
    except UserNotParticipantError:
        return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Telethon –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ /start ===
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    user_name = message.from_user.first_name or "–¥—Ä—É–≥"
    text = (
        f"–ü—Ä–∏–≤–µ—Ç {user_name}, –º–µ–Ω—è –∑–æ–≤—É—Ç –ó–∞–∫–∞—Ä–∏, —è —Ç–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –≤ –º–∏—Ä —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Ü–µ–ª–µ–πüéØ\n"
        "–°–∫–æ—Ä–µ–π –≤—ã–±–µ—Ä–∏ –∫–∞–∫–æ–π –ø–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—åüìÑ:\n"
        '(–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ –±–æ–ª—å—à–µ, –∂–º–∏ –∫–Ω–æ–ø–∫—É: "–û–±–æ –º–Ω–µ")'
    )
    await message.answer(text, reply_markup=main_menu)


# === –ö–Ω–æ–ø–∫–∞ "–ö–Ω–∏–≥–∏" ===
@dp.callback_query(F.data == "books")
async def books_handler(callback: types.CallbackQuery):
    await delete_message(callback)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏ –∫–Ω–∏–≥—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—åüìñ:", reply_markup=books_menu
    )
    await callback.answer()


# === –ù–∞–∂–∞—Ç–∞ –∫–Ω–∏–≥–∞ ===
@dp.callback_query(F.data.in_({"book_sleep", "book_morning"}))
async def send_book(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_book_request[user_id] = callback.data

    await callback.message.delete()  # –£–¥–∞–ª–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    subscribed = await check_subscription(user_id)
    if not subscribed:
        await callback.message.answer(
            "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —ç—Ç—É –∫–Ω–∏–≥—É, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ªüìπ.",
            reply_markup=subscribe_menu,
        )
        await callback.answer()
        return

    await send_book_file(callback, user_id, callback.data)


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ===
@dp.callback_query(F.data == "check_subscribe")
async def check_subscribe(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    book_data = user_book_request.get(user_id)

    if not book_data:
        await delete_message(callback)
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏ –∫–Ω–∏–≥—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—åüìñ:", reply_markup=books_menu
        )
        await callback.answer()
        return

    subscribed = await check_subscription(user_id)
    if subscribed:
        await callback.message.delete()
        await send_book_file(callback, user_id, book_data)
        user_book_request.pop(user_id, None)
        await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –ö–Ω–∏–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    else:
        await callback.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª", show_alert=True)


# === –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–∏–≥–∏ (–≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏) ===
async def send_book_file(callback, user_id, book_data):
    if book_data == "book_sleep":
        book_path = "files/zachem_my_spim.epub"
    else:
        book_path = "files/magiya_utra.epub"

    file = FSInputFile(book_path)

    back_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚è™", callback_data="back_main")]
        ]
    )

    await bot.send_document(
        chat_id=user_id, document=file, caption="–î–µ—Ä–∂–∏ –∫–Ω–∏–≥—É)", reply_markup=back_button
    )


# === –ö–Ω–æ–ø–∫–∞ "–°–æ–Ω" ===
@dp.callback_query(F.data == "sleep")
async def sleep_handler(callback: types.CallbackQuery):
    await delete_message(callback)
    await callback.message.answer(
        "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µüë®üèº‚Äçüíª ...",
        reply_markup=back_to_main_menu,
    )
    await callback.answer()


# === –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª–µ–∑–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª" ===
@dp.callback_query(F.data == "materials")
async def materials_handler(callback: types.CallbackQuery):
    await delete_message(callback)
    await callback.message.answer(
        "–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –º–æ–∏ –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é)...",
        reply_markup=back_to_main_menu,
    )
    await callback.answer()


# === –ö–Ω–æ–ø–∫–∞ "–û–±–æ –º–Ω–µ" ===
@dp.callback_query(F.data == "about")
async def about_handler(callback: types.CallbackQuery):
    await delete_message(callback)
    await callback.message.answer(
        "üî• –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ó–∞–∫–∞—Ä–∏, —Å–ø–æ—Ä—Ç—Å–º–µ–Ω –∏ —Å—Ç—É–¥–µ–Ω—Ç –í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–æ–≥–æ –ø–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞, —Ä–æ–¥–æ–º –∏–∑ —Å–æ–ª–Ω–µ—á–Ω–æ–π –ú–∞—Ö–∞—á–∫–∞–ª—ã, —á—Ç–æ –≤ –î–∞–≥–µ—Å—Ç–∞–Ω–µ. –ú–æ—è –∂–∏–∑–Ω—å ‚Äî —ç—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ä–æ—Å—Ç, –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥ –∏ –∂–µ–ª–∞–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n\n"
        "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª –∏ –ª—ë–≥–∫–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞ ‚Äî –º–æ–∏ –≥–ª–∞–≤–Ω—ã–µ —Å—Ç—Ä–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Ç –º–µ–Ω—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ, —É–ø–æ—Ä—Å—Ç–≤—É –∏ –≤–µ—Ä–µ –≤ —Å–≤–æ–∏ —Å–∏–ª—ã. –°–ø–æ—Ä—Ç ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ö–æ–±–±–∏, –∞ —á–∞—Å—Ç—å –º–µ–Ω—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞—Ä—è–∂–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–µ–π –∏ –ø–æ–º–æ–≥–∞–µ—Ç –¥–æ–±–∏–≤–∞—Ç—å—Å—è —Ü–µ–ª–µ–π.\n\n"
        "üíª –°–µ–π—á–∞—Å —è –∞–∫—Ç–∏–≤–Ω–æ –≤—Ö–æ–∂—É –≤ –º–∏—Ä –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω—Ç–∞–∂–∞ ‚Äî –∏–∑—É—á–∞—é –≤—Å—ë –Ω–æ–≤–æ–µ –∏ –ø—Ä–æ–∫–∞—á–∏–≤–∞—é —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏. –ü–æ–∫–∞ –Ω–µ –ø—Ä–æ—Ñ–∏, –Ω–æ —Ç–æ—á–Ω–æ –∑–Ω–∞—é, —á—Ç–æ —Å–∫–æ—Ä–æ —Å–º–æ–≥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä—É—Ç—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –¥–µ–ª–∞—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–µ–µ –¥–ª—è –≤—Å–µ—Ö.\n\n"
        "üìà –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ ‚Äî –º–æ–π –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å —è —Å—Ç–∞–≤–ª—é –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç —Å—Ç–∞—Ç—å –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–µ–π —Å–µ–±—è: —É–º–Ω–µ–µ, —Å–∏–ª—å–Ω–µ–µ, —É–≤–µ—Ä–µ–Ω–Ω–µ–µ. –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–∞ ‚Äî —ç—Ç–æ –º–æ–π —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏.\n\n"
        "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–µ–≥–æ —Ç—Ä—É–¥–∞ –∏ –∂–µ–ª–∞–Ω–∏—è –¥–µ–ª–∏—Ç—å—Å—è –ø–æ–ª–µ–∑–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º —Å —Ç–æ–±–æ–π. –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –≤—Å—ë, —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è, —É—á–∏—Ç—å—Å—è –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –Ø —É–∂–µ —Å–æ–∑–¥–∞–ª —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ–π –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É —É–¥–æ–±–Ω–µ–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ.\n\n"
        "üí¨ –ï—Å—Ç—å –∏–¥–µ—è, –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—à—å —Å–∫–∞–∑–∞—Ç—å ‚Äú—Å–ø–∞—Å–∏–±–æ‚Äù? –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å—é–¥–∞: @colibry_05 ‚Äî —è –æ—Ç–∫—Ä—ã—Ç –∫ –æ–±—â–µ–Ω–∏—é –∏ –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ —É—Å–ª—ã—à–∞—Ç—å, —á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å.\n\n"
        "–ü–æ–≥–Ω–∞–ª–∏ –¥–∞–ª—å—à–µ! üöÄ",
        reply_markup=back_to_main_menu,
    )
    await callback.answer()


# === –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
@dp.callback_query(F.data == "back_main")
async def back_to_main_handler(callback: types.CallbackQuery):
    await delete_message(callback)
    user_name = callback.from_user.first_name or "–¥—Ä—É–≥"
    text = (
        f"–ü—Ä–∏–≤–µ—Ç {user_name}, –º–µ–Ω—è –∑–æ–≤—É—Ç –ó–∞–∫–∞—Ä–∏, —è —Ç–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –≤ –º–∏—Ä —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Ü–µ–ª–µ–πüéØ\n"
        "–°–∫–æ—Ä–µ–π –≤—ã–±–µ—Ä–∏ –∫–∞–∫–æ–π –ø–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—åüìÑ:\n"
        '(–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ –±–æ–ª—å—à–µ –∂–º–∏ –∫–Ω–æ–ø–∫—É "–û–±–æ –º–Ω–µ")'
    )
    await callback.message.answer(text, reply_markup=main_menu)
    await callback.answer()


# === –ù–∞–∑–∞–¥ –≤ –∫–Ω–∏–≥–∏ ===
@dp.callback_query(F.data == "back_books")
async def back_to_books_handler(callback: types.CallbackQuery):
    await delete_message(callback)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏ –∫–Ω–∏–≥—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—åüìñ:", reply_markup=books_menu
    )
    await callback.answer()


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
